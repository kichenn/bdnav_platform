<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bdxh.wallet.persistence.WalletAccountRechargeMapper">
  <resultMap id="BaseResultMap" type="com.bdxh.wallet.entity.WalletAccountRecharge">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="school_code" jdbcType="VARCHAR" property="schoolCode" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="card_number" jdbcType="VARCHAR" property="cardNumber" />
    <result column="account_id" jdbcType="BIGINT" property="accountId" />
    <result column="order_no" jdbcType="BIGINT" property="orderNo" />
    <result column="order_type" jdbcType="VARCHAR" property="orderType" />
    <result column="third_order_no" jdbcType="VARCHAR" property="thirdOrderNo" />
    <result column="acceptseq" jdbcType="VARCHAR" property="acceptseq" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="recharge_money" jdbcType="DECIMAL" property="rechargeMoney" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>

  <sql id="BaseColumns">
    id, school_code, user_id, user_name, card_number, account_id, order_no, order_type, third_order_no, acceptseq, status, recharge_money, pay_time, create_date, update_date
  </sql>

  <select id="getByOrderNo" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="BaseColumns"/>
    from wallet_account_recharge
    where order_no=#{orderNo}
  </select>

  <select id="getByCondition" parameterType="java.util.Map" resultMap="BaseResultMap">
    select <include refid="BaseColumns"/>
    from wallet_account_recharge
    <where>
      <if test="schoolCode !=null">
        school_code=#{schoolCode}
      </if>
      <if test="userId != null">
        and user_id=#{userId}
      </if>
      <if test="orderNo !=null">
        and order_no=#{orderNo}
      </if>
      <if test="startTime != null">
        <![CDATA[AND create_date >= #{startTime}]]>
      </if>
      <if test="endTime != null">
        <![CDATA[AND create_date <= #{endTime}]]>
      </if>
      <if test="status != null and status != ''">
        AND status=#{status}
      </if>
    </where>
    order by create_date desc
  </select>

  <update id="updatePaying">
    <![CDATA[update wallet_account_recharge set status=#{status} where order_no=#{orderNo} and status=1]]>
  </update>

  <!-- 查询微信支付结果超时订单 -->
  <select id="getPayingDataForTask" parameterType="java.util.Map" resultMap="BaseResultMap">
    select <include refid="BaseColumns"/>
    from wallet_account_recharge
    <![CDATA[where MOD(id, #{shardCount})=#{shard} and status=2 and create_date <= date_sub(now(), interval #{timeTntervalStart} minute) and create_date > date_sub(now(), interval #{timeTntervalEnd} minute) limit 200]]>
  </select>

  <!-- 查询一卡通扣款超时订单 有可能充值成功但流水号为空-->
  <select id="getSerailNoNullForTask" parameterType="java.util.Map" resultMap="BaseResultMap">
    select <include refid="BaseColumns"/>
    from wallet_account_recharge
    <![CDATA[where MOD(id, #{shardCount})=#{shard} and status=8 and create_date <= date_sub(now(), interval #{timeTntervalStart} minute) and create_date > date_sub(now(), interval #{timeTntervalEnd} minute) and (acceptseq is null or acceptseq='') limit 200]]>
  </select>

  <!-- 清理掉超过3小时未支付的订单或者支付失败的订单-->
  <delete id="clearRechargeLog">
    <![CDATA[delete from wallet_account_recharge where (status=1 or status=3) and create_date < date_sub(now(), interval 3 HOUR) and create_date > date_sub(now(), interval 6 HOUR)]]>
  </delete>

</mapper>